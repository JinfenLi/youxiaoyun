package com.topview.school.controller.multimedia.post;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.topview.message.service.JPushServiceImpl;
import com.topview.message.util.DateFormatUtil;
import com.topview.message.util.NotEmptyString;
import com.topview.message.vo.OfflineMessageVo;
import com.topview.multimedia.service.post.PostService;
import com.topview.multimedia.vo.PostVo;
import com.topview.multimedia.vo.PraiseVo;
import com.topview.multimedia.vo.ReplyVo;
import com.topview.multimedia.vo.result.PostVoResult;
import com.topview.multimedia.vo.result.PraiseVoResult;
import com.topview.multimedia.vo.result.ReplyVoResult;
import com.topview.push.service.PushService;
import com.topview.school.service.clazz.ClazzService;
import com.topview.school.service.clazz.curricula.CurriculaVariableService;
import com.topview.school.service.post.NewPostVoService;
import com.topview.school.util.FileUploadUtil;
import com.topview.school.util.JSONUtil;
import com.topview.school.util.PostPicturePathUtil;
import com.topview.school.util.ThumbnailUtil;
import com.topview.school.util.UUIDUtil;
import com.topview.school.vo.FileUploadVo;
import com.topview.school.vo.User.UserInfo;
import com.topview.school.vo.post.NewPostVo;
import com.topview.school.vo.post.result.NewPostVoResult;

/**
 * @Description 家长圈controller
 * @Author <wuyiliang 757210697@qq.com>
 * @Date 2015年8月16日 下午10:47:27
 * @CopyRight 2015 TopView Inc
 * @version V1.0
 */
@Controller
@RequestMapping(value = "/post", produces = "text/html;charset=UTF-8")
public class PostController {

	@Resource
	private PostService postService;
	
	@Resource
	private PushService pushService;
	
	@Resource
	private ClazzService clazzService;
	
	@Resource
	private NewPostVoService newPostVoService;
	
	@Resource
	private CurriculaVariableService curriculaVariableService;

	/**
	 * 保存主贴
	 * 
	 * @param vo
	 * @param session
	 * @param request
	 * @param files
	 * @return
	 * @throws IllegalStateException
	 * @throws IOException
	 */
	@RequestMapping(value = "/savePost", method = RequestMethod.POST)
	@ResponseBody
	public String savePost(
			PostVo vo,
			HttpSession session,
			HttpServletRequest request,
			@RequestParam(value = "files", required = false) MultipartFile[] files)
			throws IllegalStateException, IOException {

		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if (userInfo == null || vo == null) {
			resultMap.put("success", false);
			return JSONUtil.toObject(resultMap).toString();
		}

		vo.setId(UUIDUtil.getUUID());
		vo.setStatus(1); // 当前只开发教师端发表帖子功能，不需审核
		if (files != null && files.length > 0) {
			List<String> urls = new ArrayList<String>();
			for (int i = 0; i < files.length; i++) {
				MultipartFile file = files[i];
				FileUploadVo fileUploadVo = FileUploadUtil.uploadFile(file,
						userInfo.getSchool_id() + "/post", request, false);
				if (fileUploadVo != null) {
					urls.add(fileUploadVo.getRelativePath());
				}
			}
			vo.setUrls(urls);
		}
		PostVoResult result = postService.savePost(vo);
		if (result.isSuccess()) {
			resultMap.put("success", true);
			resultMap.put("post", vo);
		} else {
			resultMap.put("success", false);
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	
	
	
	/**
	 * 用于新版本的家长圈，能够将所有上传的家长圈图片压缩为200*200的缩略图。
	 * 
	 * @param vo
	 * @param session
	 * @param request
	 * @param files
	 * @return
	 * @throws IllegalStateException
	 * @throws IOException
	 */
	@RequestMapping(value = "/newSavePost", method = RequestMethod.POST)
	@ResponseBody
	public String newSavePost(
			PostVo vo,
			HttpSession session,
			HttpServletRequest request,
			@RequestParam(value = "files", required = false) MultipartFile[] files)
			throws IllegalStateException, IOException {

		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if (userInfo == null || vo == null) {
			resultMap.put("success", false);
			return JSONUtil.toObject(resultMap).toString();
		}

		vo.setId(UUIDUtil.getUUID());
		vo.setStatus(1); // 当前只开发教师端发表帖子功能，不需审核
		
		//当上传的图片只有一张时，将该图片按照原图的比例压缩
		if (files != null && files.length == 1){
			List<String> urls = new ArrayList<String>();
			MultipartFile file = files[0];
			FileUploadVo fileUploadVo = FileUploadUtil.uploadFile(file,
					userInfo.getSchool_id() + "/post/", request, false);
			ThumbnailUtil.thumbnailImage(fileUploadVo.getRealPath()+"/"+file.getOriginalFilename(), 0.3);
			if (fileUploadVo != null) {
				if(FileUploadUtil.setThumbnailPath(userInfo.getSchool_id() + "/post", fileUploadVo.getFileName()).equals("error")){
					urls.add(fileUploadVo.getRelativePath());
				}
				urls.add(FileUploadUtil.setThumbnailPath(userInfo.getSchool_id() + "/post", fileUploadVo.getFileName()));
			}
			vo.setUrls(urls);
		}
		//上传多张图片时，采用压缩成方形的缩略图
		else if (files != null && files.length > 0) {
				List<String> urls = new ArrayList<String>();
				for (int i = 0; i < files.length; i++) {
					MultipartFile file = files[i];
					FileUploadVo fileUploadVo = FileUploadUtil.uploadFile(file,
							userInfo.getSchool_id() + "/post/", request, false);
					//将传入的图片生成 缩略图并放置在post/thumb文件
					//重新读出文件(写在这里简直。。。)
					File imageFile = new File(fileUploadVo.getRealPath()+"/"+file.getOriginalFilename());
					ThumbnailUtil.squareThumbnailGenerate(imageFile, 200);
					if (fileUploadVo != null) {
						if(FileUploadUtil.setThumbnailPath(userInfo.getSchool_id() + "/post", fileUploadVo.getFileName()).equals("error")){
							urls.add(fileUploadVo.getRelativePath());
						}
						urls.add(FileUploadUtil.setThumbnailPath(userInfo.getSchool_id() + "/post", fileUploadVo.getFileName()));
					}
				}
			vo.setUrls(urls);
		}
		PostVoResult result = postService.savePost(vo);
		if (result.isSuccess()) {
			
			//家长圈发送成功后，推送到同班级的用户	
			
			if(NotEmptyString.isNotNull(vo.gettMId())){		
					System.out.println(vo.gettMId());
					OfflineMessageVo message = new OfflineMessageVo();
					message.setReceiverId(vo.gettMId());
					message.setContent("您有一条新的优校云推送，请点击查看");
					
					message.setType("家长圈");
					message.setSendTime(DateFormatUtil.formatDateToSeconds (new Date()));
					message.setStatue("2");//群发消息作为已发送，不保存到数据库，不关心是否收到
					JPushServiceImpl pushService = new JPushServiceImpl();
					
					//向ios端发送通知
					pushService.sendNoticeToTag(vo.gettMId(), "您有一条新的家长圈，请点击查看", "ios");
					
					//向所有平台发送推送
					pushService.sendMultiMessageToTag(message.toJsonString(), vo.gettMId(), null);
					System.out.println(message.toJsonString());
			}
			resultMap.put("success", true);
			resultMap.put("post", vo);
		} else {
			resultMap.put("success", false);
		}
		return JSONUtil.toObject(resultMap).toString();
	}

	/**
	 * 保存评论
	 * 
	 * @param replyVo
	 *            postId 所属帖子id; replyerId 回复者id; replyTime 回复时间 ; ownerId
	 *            被回复的人的id; replyerName 回复者姓名; ownerName 被回复者姓名; content 评论内容.
	 * @param session
	 * @return
	 */
	@RequestMapping("/saveReply")
	@ResponseBody
	public String saveReply(ReplyVo replyVo, HttpSession session) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		replyVo.setId(UUIDUtil.getUUID());
		replyVo.setReplyTime(df.format(new Date()));
		ReplyVoResult result = postService.saveReply(replyVo);
		if (result.isSuccess()) {
			resultMap.put("success", true);
			resultMap.put("reply", replyVo);
		} else {
			resultMap.put("success", false);
		}
		return JSONUtil.toObject(resultMap).toString();
	}

	/**
	 * 保存点赞
	 * 
	 * @param praiseVo
	 * @param session
	 * @return
	 */
	@RequestMapping("/savePraise")
	@ResponseBody
	public String savePraise(PraiseVo praiseVo, HttpSession session) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		praiseVo.setId(UUIDUtil.getUUID());
		praiseVo.setPraiserTime(df.format(new Date()));

		PraiseVoResult result = postService.savePraise(praiseVo);
		if (result.isSuccess()) {
			resultMap.put("success", true);
			resultMap.put("praise", praiseVo);
		} else {
			resultMap.put("success", false);
		}
		return JSONUtil.toObject(resultMap).toString();
	}

	/**
	 * 根据时间点、帖子状态获取指定班级的帖子
	 * 
	 * @param session
	 * @param clazzId
	 * @param lastUpdate
	 * @param status
	 *            0代表未审核，1代表通过审核可见状态，2代表已删除
	 * @return
	 */
	@RequestMapping("/seePost")
	@ResponseBody
	public String seePost(HttpSession session, String clazzId,
			String lastUpdate, Integer status, String start, String limit) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if(userInfo==null){
			throw new RuntimeException();
		}
		String praiserId = userInfo.getUser_id();
		if (status == null) {
			status = 1; // status不传默认获取可见状态帖子
		}
		PostVoResult result = postService.seePostByTMid(session, clazzId, status,
				lastUpdate, start, limit);
		List<PostVo> posts = result.getPosts();
		if (status == 2) { // 如果是获取已删除的帖子直接返回已删除帖子的id
			String[] filter = { "context", "createTime", "praiseStatus",
					"praisesCount", "publisherId", "publisherName",
					"repliesCount", "status", "tMId", "title", "type", "urls" };
			resultMap.put("success", true);
			resultMap.put("hadDeletePost", posts);
			return JSONUtil.toObject(resultMap, filter).toString();
		}
		if (posts != null) {
			for (int i = 0; i < posts.size(); i++) {
				if (postService.judgePraise(praiserId, posts.get(i).getId())
						.isSuccess()) { // 判断当前用户是否已经点过赞
					posts.get(i).setPraiseStatus(true);
				}
			}
		}
		resultMap.put("success", result.isSuccess());
		resultMap.put("posts", posts);
		return JSONUtil.toObject(resultMap).toString();
	}

	/**
	 * 根据帖子id和时间点获取评论
	 * 
	 * @param session
	 * @param postId
	 * @param lastUpdate
	 * @return
	 */
	@RequestMapping("/seeReply")
	@ResponseBody
	public String seeReply(HttpSession session, String postId, String lastUpdate) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		ReplyVoResult result = postService.seeReplyByPostId(postId, lastUpdate);
		resultMap.put("success", result.isSuccess());
		resultMap.put("replies", result.getResult());
		return JSONUtil.toObject(resultMap).toString();
	}

	/**
	 * 查看点赞信息
	 * 
	 * @param session
	 * @param postId
	 * @param lastUpdate
	 * @return
	 */
	@RequestMapping("/seePraises")
	@ResponseBody
	public String seePraises(HttpSession session, String postId,
			String lastUpdate) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		PraiseVoResult result = postService.seePraiseByPostId(postId,
				lastUpdate);
		resultMap.put("success", result.isSuccess());
		resultMap.put("praises", result.getResult());
		return JSONUtil.toObject(resultMap).toString();
	}
	
	
	/**
	 * 查看点赞和评论信息
	 * 
	 * @param session
	 * @param postId
	 * @param lastUpdate
	 * @return
	 */
	@RequestMapping("/seePraisesAndReplies")
	@ResponseBody
	public String getPraiseAndReply(HttpSession session, String postId, String lastUpdate){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		ReplyVoResult replyResult = postService.seeReplyByPostId(postId, lastUpdate);
		PraiseVoResult praiseResult = postService.seePraiseByPostId(postId,
				lastUpdate);
		resultMap.put("replies", replyResult.getResult());
		resultMap.put("praises", praiseResult.getResult());
		resultMap.put("success", replyResult.isSuccess()&&praiseResult.isSuccess());
		return JSONUtil.toObject(resultMap).toString();
	}
	

	/**
	 * 删除帖子或评论或取消赞
	 * 
	 * @param session
	 * @param postId
	 * @param praiseId
	 * @param replyId
	 * @return
	 */
	@RequestMapping("/deletePost")
	@ResponseBody
	public String deletePost(HttpSession session, String postId,
			String praiseId, String replyId) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		if (postId != null && !"".equals(postId)) {
			resultMap.put("success", postService.delete(postId, 1).isSuccess());
		} else if (replyId != null && !"".equals(replyId)) {
			resultMap
					.put("success", postService.delete(replyId, 2).isSuccess());
		} else if (praiseId != null && !"".equals(praiseId)) {
			resultMap.put("success", postService.delete(praiseId, 3)
					.isSuccess());
		} else {
			resultMap.put("success", false);
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	
	
	
	@RequestMapping(value = "/savePostByOrder", method = RequestMethod.POST)
	@ResponseBody
	public String savePostByOrder(
			PostVo vo,String schoolId,String[] fileNames,
			@RequestParam(value = "files", required = false) MultipartFile[] files,HttpSession session,HttpServletRequest request)
			throws IllegalStateException, IOException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if (userInfo == null || vo == null) {
			resultMap.put("success", false);
			return JSONUtil.toObject(resultMap).toString();
		}

		vo.setId(UUIDUtil.getUUID());
		vo.setStatus(1); // 当前只开发教师端发表帖子功能，不需审核
		vo = PostPicturePathUtil.savePicturePath(vo, files, request, fileNames, schoolId);
		PostVoResult result = postService.savePost(vo);
		if (result.isSuccess()) {
			
			//家长圈发送成功后，推送到同班级的用户	
			
			if(NotEmptyString.isNotNull(vo.gettMId())){		
					System.out.println(vo.gettMId());
					OfflineMessageVo message = new OfflineMessageVo();
					message.setReceiverId(vo.gettMId());
					message.setContent("您有一条新的优校云推送，请点击查看");
					
					message.setType("家长圈");
					message.setSendTime(DateFormatUtil.formatDateToSeconds (new Date()));
					message.setStatue("2");//群发消息作为已发送，不保存到数据库，不关心是否收到
					JPushServiceImpl pushService = new JPushServiceImpl();
					
					//向ios端发送通知
					pushService.sendNoticeToTag(vo.gettMId(), "您有一条新的家长圈，请点击查看", "ios");
					
					//向所有平台发送推送
					pushService.sendMultiMessageToTag(message.toJsonString(), vo.gettMId(), null);
					System.out.println(message.toJsonString());
			}
			resultMap.put("success", true);
			List<PostVo> temp = new ArrayList<PostVo>();
			NewPostVo newPostVo = new NewPostVo();
			temp.add(vo);
			newPostVo.setVoList(temp);
			NewPostVoResult newPostVoResult = newPostVoService.getNewPostVo(newPostVo);
			resultMap.put("success", true);
			resultMap.put("post", newPostVoResult.getResult().getVoList().get(0));
			resultMap.put("post", vo);
		} else {
			resultMap.put("success", false);
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	
	/**
	 * 教师发布家长圈时群发给其下的班级的所有学生
	 * @param classes		该教师其下的班级id构成的字符串，用逗号隔开
	 * @param semesterId	学期id
	 * @param teacherId		教师id
	 * @param schoolId		学校id
	 * @param vo			家长圈的相关内容
	 * @param request		
	 * @param files			家长圈的相片集合
	 * @return
	 * @throws IllegalStateException
	 * @throws IOException
	 */
	@RequestMapping(value = "/postToClasses", method = RequestMethod.POST)
	@ResponseBody
	public String postToClasses(
			String classes,String semesterId,String teacherId,String teacherName,String schoolId,PostVo vo,
			HttpServletRequest request,
			@RequestParam(value = "files", required = false) MultipartFile[] files,String[] fileNames)
			throws IllegalStateException, IOException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("success", false);
		vo.setStatus(1); // 当前只开发教师端发表帖子功能，不需审核
		vo.setPublisherName(teacherName);
		vo.setPublisherId(teacherId);
		vo = PostPicturePathUtil.savePicturePath(vo, files, request, fileNames, schoolId);
		Set<String> classList = null;
		int count = 0;
		if("all".equals(classes.trim())) {
			classList = curriculaVariableService.getCurriculaByTeacherAndSemesterId(teacherId, semesterId);
		} else {
			String [] classIdes = classes.split(",");
			for(int i=0;i<classIdes.length;i++) {
				if(classList == null) {
					classList = new HashSet<String>();
					classList.add(classIdes[i]);
				}
				else classList.add(classIdes[i]);
			}
		}
		if(classList == null || classList.size() == 0) {
			resultMap.put("success", false);
		} else {
			Iterator<String> it = classList.iterator();
			while(it.hasNext()) {
				String tMId = it.next();
				System.out.println("tMId ======" + tMId);
				vo.settMId(tMId);
				vo.setId(UUIDUtil.getUUID());
				PostVoResult result = postService.savePost(vo);
				if(result.isSuccess()) {
							
							//家长圈发送成功后，推送到同班级的用户	
							
							if(NotEmptyString.isNotNull(vo.gettMId())){		
									OfflineMessageVo message = new OfflineMessageVo();
									message.setReceiverId(vo.gettMId());
									message.setContent("您有一条新的优校云推送，请点击查看");
									
									message.setType("家长圈");
									message.setSendTime(DateFormatUtil.formatDateToSeconds (new Date()));
									message.setStatue("2");//群发消息作为已发送，不保存到数据库，不关心是否收到
									JPushServiceImpl pushService = new JPushServiceImpl();
									
									//向ios端发送通知
									pushService.sendNoticeToTag(vo.gettMId(), "您有一条新的家长圈，请点击查看", "ios");
									
									//向所有平台发送推送
									pushService.sendMultiMessageToTag(message.toJsonString(), vo.gettMId(), null);
									System.out.println(message.toJsonString());
							}
							count++;
					}
			}
			if(count == classList.size()) {
				List<PostVo> temp = new ArrayList<PostVo>();
				NewPostVo newPostVo = new NewPostVo();
				temp.add(vo);
				newPostVo.setVoList(temp);
				NewPostVoResult result = newPostVoService.getNewPostVo(newPostVo);
				resultMap.put("success", true);
				resultMap.put("post", result.getResult().getVoList().get(0));
			}
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	
	/**
	 * 根据时间点、帖子状态获取指定班级的帖子(增加了判断是否是教师)
	 * @param session
	 * @param clazzId
	 * @param lastUpdate
	 * @param status		0代表未审核，1代表通过审核可见状态，2代表已删除
	 * @param start
	 * @param limit
	 * @return
	 */
	@RequestMapping("/newSeePost")
	@ResponseBody
	public String newSeePost(HttpSession session, String clazzId,
			String lastUpdate, Integer status, String start, String limit,String userId) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if(userInfo==null){
			throw new RuntimeException();
		}
		String praiserId = userId;
		if (status == null) {
			status = 1; // status不传默认获取可见状态帖子
		}
		PostVoResult temp = postService.seePostByTMid(session, clazzId, status,
				lastUpdate, start, limit);
		NewPostVo newPostVo = new NewPostVo();
		newPostVo.setVoList(temp.getPosts());
		NewPostVoResult result = newPostVoService.getNewPostVo(newPostVo);
		List<PostVo> posts = result.getResult().getVoList();
		if (status == 2) { // 如果是获取已删除的帖子直接返回已删除帖子的id
			String[] filter = { "context", "createTime", "praiseStatus",
					"praisesCount", "publisherId", "publisherName",
					"repliesCount", "status", "tMId", "title", "type", "urls" };
			resultMap.put("success", true);
			resultMap.put("hadDeletePost", posts);
			return JSONUtil.toObject(resultMap, filter).toString();
		}
		if (posts != null) {
			for (int i = 0; i < posts.size(); i++) {
				if (postService.judgePraise(praiserId, posts.get(i).getId())
						.isSuccess()) { // 判断当前用户是否已经点过赞
					posts.get(i).setPraiseStatus(true);
				}
			}
		}
		resultMap.put("success", temp.isSuccess());
		resultMap.put("posts", posts);
		return JSONUtil.toObject(resultMap).toString();
	}
	
}
