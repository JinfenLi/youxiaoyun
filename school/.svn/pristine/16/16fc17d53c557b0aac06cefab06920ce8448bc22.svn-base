package com.topview.school.controller.multimedia.evaluation;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.topview.multimedia.service.evaluation.EvaluationService;
import com.topview.multimedia.vo.EvaluationInfo;
import com.topview.multimedia.vo.EvaluationTemplateInfo;
import com.topview.multimedia.vo.GroupInfo;
import com.topview.multimedia.vo.result.EvaluationTemplateInfoResult;
import com.topview.school.po.Role;
import com.topview.school.service.evaluation.SchoolEvaluationService;
import com.topview.school.service.school.SchoolService;
import com.topview.school.service.system.authc.RoleService;
import com.topview.school.service.user.student.StudentService;
import com.topview.school.service.user.teacher.TeacherService;
import com.topview.school.util.FileUploadUtil;
import com.topview.school.util.JSONUtil;
import com.topview.school.util.ThumbnailUtil;
import com.topview.school.vo.FileUploadVo;
import com.topview.school.vo.User.UserInfo;

/** * @author  Rachel 
@date 创建时间：2016年9月20日 下午9:32:48 * 
@version 1.0 * 
@parameter  *
 @since  * 
@return  */
@Controller
@RequestMapping(value="/evaluation",produces = "text/html;charset=UTF-8")
public class EvaluationController {
	
	@Resource
	private EvaluationService es;
	@Resource
	private SchoolEvaluationService ses;
	@Resource
	private SchoolService schoolService;
	@Resource
	private StudentService ss;
	@Resource
	private RoleService rs;
	@Resource
	private TeacherService ts;
	
	/**
	 * 保存评价
	 * @param session
	 * @param comment
	 * @param studentId
	 * @param templateId
	 * @return
	 */
	@RequestMapping("/savePersonalEvaluation")
	@ResponseBody
	public String saveEvaluation(HttpSession session,String comment,String studentId,
			String templateId){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		EvaluationInfo info = new EvaluationInfo();
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			String[] ids = studentId.split(",");
			info.setComment(comment);
			info.setTeacherId(userInfo.getUser_id());
			info.setTemplateId(templateId);
			for(String t:ids){
				info.setStudentId(t);
				resultMap.put("success", es.evaluationSave(info).isSuccess());
			}
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	/**
	 * 保存小组评价
	 * @param session
	 * @param groupId
	 * @param templateId
	 * @param comment
	 * @return
	 */
	@RequestMapping("/saveGroupEvaluation")
	@ResponseBody
	public String saveGroupEvalutation(HttpSession session,String comment,GroupInfo gi){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		EvaluationInfo info = new EvaluationInfo();
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			List<String> ids = es.studentFindByGroupId(gi).getInfoResult().get(0).getStudentId();
			for(String t:ids){
				info.setTeacherId(userInfo.getUser_id());
				info.setStudentId(t);
				info.setGroupId(gi.getId());
				info.setTemplateId(gi.getTemplateId());
				info.setComment(comment);
				resultMap.put("success", es.evaluationSave(info).isSuccess());
			}
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	
	/**
	 * 保存评价模板
	 * flag=0表示非管理员且超过模板个数，1表示管理员，2表示非管理员未超过模板个数
	 * @param session
	 * @param name
	 * @param score
	 * @param url
	 * @return
	 */
	@RequestMapping("/saveEvaluationTemplate")
	@ResponseBody
	public String saveEvaluationTemplate(HttpSession session,String name,
		Integer score,HttpServletRequest request,
		@RequestParam(value = "file", required = false) MultipartFile file){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		EvaluationTemplateInfo info = new EvaluationTemplateInfo();
		info.setUploaderId(userInfo.getUser_id());
		int flag = 0;
		List<Role> lr = rs.selectByUserId(userInfo.getUser_id());
		for(Role r : lr){
			if(r.getId().equals("000")||r.getId().equals("7cc0199c8ce84fb0bc181007cee6f8a5")){
				flag=1;
			}
		}
		if(flag==0){
			if(es.templateCountByUser(info).getCode()==201){
			resultMap.put("result", es.templateCountByUser(info));
		    }else{
		    	flag=2;
		    }
		} 
		if(flag==1||flag==2){
			if(file!=null){
				FileUploadVo fileUploadVo = FileUploadUtil.uploadFile(file,"evaluationtemplate"+"/"+schoolService.selectByPrimaryKey(userInfo.getSchool_id()).getName() ,
							request, true);
 				ThumbnailUtil.thumbnailImage(fileUploadVo.getRealPath()+"/"+fileUploadVo.getFileName(), 0.3);
				if (fileUploadVo != null) {
					if(FileUploadUtil.setThumbnailPath("evaluationtemplate"+"/"+schoolService.selectByPrimaryKey(userInfo.getSchool_id()).getName(), fileUploadVo.getFileName()).equals("error")){
						info.setUrl(fileUploadVo.getRelativePath());
					}else{
						info.setUrl(FileUploadUtil.setThumbnailPath("evaluationtemplate"+"/"+schoolService.selectByPrimaryKey(userInfo.getSchool_id()).getName(), fileUploadVo.getFileName()));
					}
					
				}
			}
			info.setName(name);
			info.setScore(score);
		}
		if(flag==1){
			info.setType("pass");
			EvaluationTemplateInfoResult list =es.evaluationTemplateSave(info);
			if(list.isSuccess()){
				info.setId(list.getInfoResult().get(0).getId());
				resultMap.put("result", ses.templateSave(info));
			}
		}else if(flag==2){
		}
		if(flag==1){
			EvaluationTemplateInfoResult list =es.evaluationTemplateSave(info);
			if(list.isSuccess()){
				info.setId(list.getInfoResult().get(0).getId());
				EvaluationTemplateInfoResult result =ses.templateSave(info);
				resultMap.put("success", result.isSuccess());
				resultMap.put("code", result.getCode());
			}
		}else if(flag==2){
			info.setType("unpass");
			EvaluationTemplateInfoResult result = es.evaluationTemplateSave(info);
			resultMap.put("success", result.isSuccess());
			resultMap.put("code", result.getCode());
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	
	/**
	 * 获取自己的个性化模板
	 * @param session
	 * @return
	 */
	@RequestMapping("/findOwnEvaluationTemplate")
	@ResponseBody
	public String findOwnEvaluationTemplate(HttpSession session){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		String filter[] = { "pager","schoolId" };
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		EvaluationTemplateInfo info = new EvaluationTemplateInfo();
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			info.setUploaderId(userInfo.getUser_id());
			EvaluationTemplateInfoResult result = es.templateJudgeOwner(info);
			List<EvaluationTemplateInfo> list= result.getInfoResult();
			resultMap.put("list", list);
		}
		return JSONUtil.toObject(resultMap,filter).toString();
	}
	/**
	 * 按类型查找模板
	 * @param session
	 * @param type
	 * @return
	 */
	@RequestMapping("/findUnpassTemplate")
	@ResponseBody
	public String findUnpassTemplate(HttpSession session){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		String filter[] = { "pager" ,"schoolId"};
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		EvaluationTemplateInfo info = new EvaluationTemplateInfo();
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			info.setSchoolId(userInfo.getSchool_id());
			EvaluationTemplateInfoResult result = es.templateFindByUnpass(info);
			List<EvaluationTemplateInfo> list= result.getInfoResult();
			resultMap.put("list", list);
		}
		return JSONUtil.toObject(resultMap,filter).toString();
	}
	
	/**
	 * 修改模板信息
	 * @param session
	 * @param template_id
	 * @param name
	 * @param score
	 * @param url
	 * @return
	 */
	@RequestMapping("/updateEvaluationTemplate")
	@ResponseBody
	public String updateEvaluationTemplate(HttpSession session,HttpServletRequest request,String templateId,String name,Integer score,
			@RequestParam(value = "file", required = false) MultipartFile file){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		String filter[] = { "pager" };
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		EvaluationTemplateInfo info = new EvaluationTemplateInfo();
		int flag = 0;
		info.setId(templateId);
		EvaluationTemplateInfo result = es.templateFindById(info).getInfoResult().get(0);
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			if(file!=null){
				FileUploadVo fileUploadVo = FileUploadUtil.uploadFile(file,"evaluationtemplate"+"/"+schoolService.selectByPrimaryKey(userInfo.getSchool_id()).getName() ,
							request, true);
 				ThumbnailUtil.thumbnailImage(fileUploadVo.getRealPath()+"/"+fileUploadVo.getFileName(), 0.3);
				if (fileUploadVo != null) {
					if(FileUploadUtil.setThumbnailPath("evaluationtemplate"+"/"+schoolService.selectByPrimaryKey(userInfo.getSchool_id()).getName(), fileUploadVo.getFileName()).equals("error")){
						result.setUrl(fileUploadVo.getRelativePath());
					}else{
						result.setUrl(FileUploadUtil.setThumbnailPath("evaluationtemplate"+"/"+schoolService.selectByPrimaryKey(userInfo.getSchool_id()).getName(), fileUploadVo.getFileName()));
					}
					
				}
			}
			List<Role> lr = rs.selectByUserId(userInfo.getUser_id());
			for(Role r : lr){
				if(r.getId().equals("000")||r.getId().equals("7cc0199c8ce84fb0bc181007cee6f8a5")){
					 flag =1;
				}
			}
			if(flag==0){
				if(result.getType().equals("pass")){
					result.setType("updatenopass");
				}
			}
			result.setName(name);
			result.setScore(score);
			resultMap.put("success", es.templateUpdate(result).isSuccess());
		}
		return JSONUtil.toObject(resultMap,filter).toString();
	}
	/**
	 * 保存分组
	 * @param session
	 * @param classId
	 * @param studentId
	 * @param name
	 * @param privacy
	 * @return
	 */
	@RequestMapping("/saveGroup")
	@ResponseBody
	public String saveGroup(HttpSession session,GroupInfo info){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
              info.setCreaterId(userInfo.getUser_id());
			resultMap.put("success", es.groupSave(info).isSuccess());
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	/**
	 * 查看某班的小组
	 * @param session
	 * @return
	 */
	@RequestMapping("/findAllGroup")
	@ResponseBody
	public String findAllGroup(HttpSession session,String classId){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		String filter[] = { "pager" };
		GroupInfo info = new GroupInfo();
		List<String> studentName = new ArrayList<String>();
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
            info.setClassId(classId);
            List<GroupInfo> list = es.groupFindAll(info).getInfoResult();
            
            for(GroupInfo gi : list){
            	studentName = gi.getStudentName();
            	List<String>ids = gi.getStudentId();
            	for(String t : ids){
            		String e = ss.selectByPrimaryKey(t).getName();
            		studentName.add(e);
            	}
            	gi.setStudentName(studentName);
            }
			resultMap.put("list", list);
		}
		return JSONUtil.toObject(resultMap,filter).toString();
	}
	/**
	 * 查看某个学生的评价
	 * @param session
	 * @param studentId
	 * @return
	 */
	@RequestMapping("/findEvaluationByStudent")
	@ResponseBody
	public String findEvaluationByStudent(HttpSession session,String studentId,String startTime,String endTime){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<EvaluationInfo> resultList = new ArrayList<EvaluationInfo>();
		String filter[] = {"pager","studentId","templateId","startTime","endTime","groupId","groupscore","type","uploaderId"};
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		EvaluationInfo info = new EvaluationInfo();
		String[] ids = studentId.split(",");
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			for(String t:ids){
				info.setStudentId(t);
           info.setStartTime(startTime);
           info.setEndTime(endTime);
           List<EvaluationInfo> list = es.evaluationFindByStudent(info).getInfoResult();
            if(list!=null&&list.size()>0){
        	   for(EvaluationInfo ei : list){
        	   ei.setStudentName(ss.selectByPrimaryKey(ei.getStudentId()).getName());
        	   ei.setTeacherName(ts.selectTeacherById(ei.getTeacherId()).getName());
        	   resultList.add(ei);
               }
			}
           }
           resultMap.put("list", resultList);
		}
		return JSONUtil.toObject(resultMap,filter).toString();
	}
	/**
	 * 管理员审核通过模板
	 * @param session
	 * @param templateId
	 * @return
	 */
	@RequestMapping("/confirmByAdmin")
	@ResponseBody
	public String confirmByAdmin(HttpSession session,String templateId){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		EvaluationTemplateInfo info =  new EvaluationTemplateInfo();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			info.setId(templateId);
			String type = es.templateFindById(info).getInfoResult().get(0).getType();
			if(type.equals("unpass")){
				ses.templateSave(info);
			}
			info.setType("pass");
		    resultMap.put("success", es.templateUpdate(info).isSuccess());
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	/**
	 * 模板下架
	 * @param session
	 * @return
	 */
	@RequestMapping("/deleteTemplate")
	@ResponseBody
	public String deleteTemplate(HttpSession session,String templateId){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		EvaluationTemplateInfo info =  new EvaluationTemplateInfo();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			String[] ids = templateId.split(",");
			info.setType("close");
			info.setUploaderId(userInfo.getUser_id());
			for(String t:ids){
				info.setId(t);
				es.templateDeleteByTeacher(info);
				resultMap.put("success", es.templateUpdate(info).isSuccess());
			}
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	/**
	 * 获取学生总分
	 * @param session
	 * @return
	 */
	@RequestMapping("/getStudentTotalScore")
	@ResponseBody
	public String getStudentTotalScore(HttpSession session,String startTime,String endTime,String studentId){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>> ();
		Map<String,Object> param = new HashMap<String,Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			String[] ids = studentId.split(",");
			param.put("startTime", startTime);
			param.put("endTime", endTime);
			for(String t:ids){
				Map<String, Object> maplist = new HashMap<String, Object>();
				 param.put("studentId", t);
				 maplist.put("studentId", t);
				 maplist.put("score", es.stuTotalScore(param));
				 list.add(maplist);
			}
			resultMap.put("list", list);
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	/**
	 * 删除小组
	 * @param session
	 * @return
	 */
	@RequestMapping("/deleteGroup")
	@ResponseBody
	public String deleteGroup(HttpSession session,String groupId){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			    GroupInfo info = new GroupInfo();
			    String[] ids = groupId.split(",");
			    for(String t:ids){
			    	info.setId(t);
				resultMap.put("result", es.groupDelete(info));
			    }
		}
		
		return JSONUtil.toObject(resultMap).toString();
	}
	/**
	 * 判断是否能删除
	 * @param session
	 * @param evaluationId
	 * @return
	 */
	@RequestMapping("/judgeDelete")
	@ResponseBody
	public String judgeDelete(HttpSession session,String evaluationId){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			EvaluationInfo info = new EvaluationInfo();
			info.setId(evaluationId);
			info.setTeacherId(userInfo.getUser_id());
			if(!es.isOwnEvaluation(info)){
				resultMap.put("message", "not your evaluation,cannot delete");
			}else{
						boolean flag1 = es.isGroupEvaluation(info);
						if(flag1==true){
						resultMap.put("message", "group evaluation");
					}else{
						resultMap.put("success", true);
					}
				}
		}
		
		return JSONUtil.toObject(resultMap).toString();
	}
	/**
	 * 删除评价
	 * @param session
	 * @return
	 */
	@RequestMapping("/deleteEvaluation")
	@ResponseBody
	public String deleteEvaluation(HttpSession session,String evaluationId){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			EvaluationInfo info = new EvaluationInfo();
			info.setId(evaluationId);
			resultMap.put("success", es.evaluationDelete(info).isSuccess());
		}
		return JSONUtil.toObject(resultMap).toString();
	}
	/**
	 * 查处我创建的小组
	 * @param session
	 * @return
	 */
	@RequestMapping("/findMyGroup")
	@ResponseBody
	public String findMyGroup(HttpSession session){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		String filter[] = {"pager","templateId"};
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		List<String> studentName = new ArrayList<String>();
		if(userInfo==null){
			resultMap.put("code", 500);
			throw new RuntimeException();
		}else{
			GroupInfo info = new GroupInfo();
			info.setCreaterId(userInfo.getUser_id());
			 List<GroupInfo> list = es.groupFindAll(info).getInfoResult();
	            for(GroupInfo gi : list){
	            	studentName = gi.getStudentName();
	            	List<String> ids = gi.getStudentId();
	            	for(String t : ids){
	            		String e = ss.selectByPrimaryKey(t).getName();
	            		studentName.add(e);
	            	}
	            	gi.setStudentName(studentName);
	            }
			resultMap.put("result",list);
		}
		return JSONUtil.toObject(resultMap,filter).toString();
	}
	/**
	 * 修改小组信息
	 * @param session
	 * @param groupId
	 * @param name
	 * @param studentId
	 * @return
	 */
	@RequestMapping("/updateGroup")
	@ResponseBody
	public String updateGroup(HttpSession session,GroupInfo info){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("success", es.groupUpdate(info).isSuccess());
		return JSONUtil.toObject(resultMap).toString();
	}
	/**
	 * 按类型计分
	 * @param session
	 * @param startTime
	 * @param endTime
	 * @param studentId
	 * @param sort
	 * @return
	 */
	@RequestMapping("/getSortedEvaluation")
	@ResponseBody
	public String getSortedEvaluation(HttpSession session,String startTime,String endTime,String studentId){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String,Object> param = new HashMap<String,Object>();
			param.put("studentId", studentId);
			param.put("startTime", startTime);
			param.put("endTime", endTime);
			System.out.println(startTime);
			 List<Map<String,Object>> list = es.evaluationSorted(param);
			if(list!=null&&list.size()>0){
				resultMap.put("success", true);
				resultMap.put("result", list);
			}else{
				resultMap.put("success", false);
			}
		return JSONUtil.toObject(resultMap).toString();
	}
	/**
	 * 获取用户能用的模板
	 * @param session
	 * @return
	 */
	@RequestMapping("/findTemplateAvailable")
	@ResponseBody
	public String findTemplateAvailable(HttpSession session){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		String filter[] = { "pager" ,"schoolId"};
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		EvaluationTemplateInfo info = new EvaluationTemplateInfo();
		if(userInfo==null){
			resultMap.put("code", 500);
            throw new RuntimeException();
		}else{
			info.setUploaderId(userInfo.getUser_id());
			resultMap.put("result", es.templateAvailable(info));
		}
		return JSONUtil.toObject(resultMap,filter).toString();
	}

}
