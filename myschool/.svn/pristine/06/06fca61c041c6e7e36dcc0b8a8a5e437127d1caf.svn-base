/**
 * @Description: 
 * @author chenzufeng
 * @date  2015年9月5日 下午3:57:16 
 * @version V1.0
 */
package com.topview.school.controller.appraise.appraiseSubject;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.topview.school.po.Role;
import com.topview.school.po.Subject;
import com.topview.school.service.appraise.appraiseSubjectTemplate.AppraiseSubjectRequest;
import com.topview.school.service.appraise.appraiseSubjectTemplate.AppraiseSubjectService;
import com.topview.school.service.clazz.curricula.CurriculaService;
import com.topview.school.service.school.subject.SubjectService;
import com.topview.school.service.system.authc.RoleService;
import com.topview.school.util.JSONUtil;
import com.topview.school.vo.User.UserInfo;
import com.topview.school.vo.appraise.AppraiseSubjectInfo;
import com.topview.school.vo.appraise.SubjectInfo;
import com.topview.school.vo.appraise.result.AppraiseSubjectInfoResult;

/**
 * @ClassName: AppraiseSubjectController
 * @Description: TODO
 * @author Chenzufeng 1023284613@qq.com
 * @date 2015年9月5日 下午3:57:16
 * 
 */
@Controller
@RequestMapping(value = "/appraiseSubject", produces = "text/html;charset=UTF-8")
public class AppraiseSubjectController {

	@Autowired
	private AppraiseSubjectService appraiseSubjectService;
	@Autowired
	private SubjectService subjectService;
	@Resource
	private CurriculaService curriculaService;
	@Autowired
	private RoleService roleService;
	
	
	
	
	
	
	@RequestMapping("/saveAppraiseSubject")
	@ResponseBody
	public String saveAppraiseSubject(String subject, String word, String type,
			HttpSession session) {

		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		AppraiseSubjectInfo info = new AppraiseSubjectInfo();
		info.setSubject(subject);
		info.setWord(word);
		if ("0".equals(type)) {
			info.setSign(userInfo.getSchool_id());
		}
		if ("1".equals(type)) {
			info.setSign(userInfo.getUser_id());
		}
		AppraiseSubjectInfoResult result = appraiseSubjectService
				.saveAppraiseSubject(info);
		resultMap.put("success", result.isSuccess());
		return JSONUtil.toObject(resultMap).toString();
	}

	@RequestMapping("/deleteAppraiseSubject")
	@ResponseBody
	public String deleteAppraiseSubject(String appraiseSubjectId) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		AppraiseSubjectRequest deleteRequest = new AppraiseSubjectRequest();
		deleteRequest.setId(appraiseSubjectId);
		if (appraiseSubjectService.DeleteappraiseSubject(deleteRequest))
			resultMap.put("success", true);
		else
			resultMap.put("success", true);
		return JSONUtil.toObject(resultMap).toString();

	}

	/**
	 * 获取模板
	 *
	 * @param
	 *
	 * @param subject
	 * @param type
	 * @return
	 */
	@RequestMapping("/getAppraiseSubject")
	@ResponseBody
	public String getAppraiseSubject(String subject, HttpSession session) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		AppraiseSubjectInfo info = new AppraiseSubjectInfo();
		info.setSubject(subject);
		info.setSign("123");
		AppraiseSubjectInfoResult result = appraiseSubjectService
				.getAppraiseSubject(info);
		info.setSign(userInfo.getSchool_id());
		AppraiseSubjectInfoResult resultForSchool = appraiseSubjectService
				.getAppraiseSubject(info);
		info.setSign(userInfo.getUser_id());
		AppraiseSubjectInfoResult resultForTeacher = appraiseSubjectService
				.getAppraiseSubject(info);
		resultMap.put("result", result.getInforesult());
		resultMap.put("resultForSchool", resultForSchool.getInforesult());
		resultMap.put("resultForTeacher", resultForTeacher.getInforesult());
		resultMap.put("success", result.isSuccess());
		return JSONUtil.toObject(resultMap).toString();
	}

	/**
	 * 通过教师id获取学科
	 *
	 * @param
	 * @param subject
	 * @return
	 */
	@RequestMapping("/getSubject")
	@ResponseBody
	public String getSubject(HttpSession session, String classId,
			String semesterId) {
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		List<Subject> subject = subjectService.getSubjectsForTeacher(
				userInfo.getUser_id(), classId , semesterId);
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<SubjectInfo> subjectList = new ArrayList<SubjectInfo>();

		if (userInfo.getTeacher_info().getLeading_class() != null) {
			SubjectInfo info1 = new SubjectInfo();
			info1.setName("班主任");
			info1.setSubject("班主任");
			info1.setType("1");
			subjectList.add(info1);
		}
		if (subject != null) {
			for (Subject name : subject) {
				String subjectName = name.getName();
				if (subjectName.equals("英语") || subjectName.equals("数学")
						|| subjectName.equals("语文")) {
					SubjectInfo info = new SubjectInfo();
					info.setSubject(subjectName);
					info.setName(subjectName + "老师");
					info.setType("0");
					subjectList.add(info);
				}
			}
		}
		resultMap.put("result", subjectList);
		resultMap.put("success", true);

		return JSONUtil.toObject(resultMap).toString();
	}

	/**
	 * 通过excel导入评价模板
	 * 
	 * 
	 *
	 */
	@RequestMapping("/saveAppraiseSubjectByExcel")
	@ResponseBody
	public String saveAppraiseSubjectByExcel(
			@Valid AppraiseSubjectRequest asrequest,
			@RequestParam("file") MultipartFile file,
			HttpServletRequest request, HttpSession session)
			throws IllegalStateException, IOException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		String type = asrequest.getType();
		if ("0".equals(type)) {
			asrequest.setSign(userInfo.getSchool_id());
		}
		if ("1".equals(type)) {
			asrequest.setSign(userInfo.getUser_id());
		} else {
			asrequest.setSign("123");
		}
		String path = request.getSession().getServletContext()
				.getRealPath("upload");// 设置文件存储的位置
		String fileName = file.getOriginalFilename();
		File uploadPath = new File(path, fileName);
		if (!uploadPath.exists()) {
			uploadPath.mkdir();
		}
		if (fileName == null || fileName.equals("")) {
			resultMap.put("success", false);
			return JSONUtil.toObject(resultMap).toString();
		}
		file.transferTo(uploadPath);
		asrequest.setPath(uploadPath.getAbsolutePath());
		if (!appraiseSubjectService.appraiseSubjectSaveByExcel(asrequest)) {
			resultMap.put("success", false);
			return JSONUtil.toObject(resultMap).toString();
		}
		resultMap.put("success", true);
		return JSONUtil.toObject(resultMap).toString();
	}
	
	/**
	 * 获取该用户是否是超级管理员
	 * @param session
	 * @return
	 */
	@RequestMapping("/getRole")
	@ResponseBody
	public String getRole(HttpSession session){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		List<Role> list = roleService.selectByUserId(userInfo.getUser_id());
	for(Role role : list){
		if("超级管理员".equals(role.getRole())){
			resultMap.put("result", "超级管理员");
			resultMap.put("success", true);
			return JSONUtil.toObject(resultMap).toString();
		}
	}
		resultMap.put("result", "普通教师");
		resultMap.put("success", true);
		return JSONUtil.toObject(resultMap).toString();
				
	}
	
	
	
	@RequestMapping("/switchTemp")
	@ResponseBody
     public String switchTemp(HttpSession session,String tempId){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		UserInfo userInfo = (UserInfo) session.getAttribute("currentUser");
		AppraiseSubjectInfo info = new AppraiseSubjectInfo();
		info.setId(tempId);
		info.setSign(userInfo.getSchool_id());
		appraiseSubjectService.updateAppraiseSubject(info);
		resultMap.put("success", true);
		return JSONUtil.toObject(resultMap).toString();
	}
	
}
